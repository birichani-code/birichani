{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction PaginationControlsComponent_ul_3_li_1_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.previous());\n    })(\"click\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.previous());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 9);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_1_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"disabled\", _r0.isFirstPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", 1 < _r0.getCurrent());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isFirstPage());\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_4_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.setCurrent(page_r10.value));\n    })(\"click\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.setCurrent(page_r10.value));\n    });\n    i0.ɵɵelementStart(1, \"span\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r11.screenReaderPageLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(5, 2, page_r10.label, \"\"));\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 16)(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r12.screenReaderCurrentLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(6, 2, page_r10.label, \"\"));\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_4_a_1_Template, 6, 5, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_4_ng_container_2_Template, 7, 5, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const page_r10 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"current\", _r0.getCurrent() === page_r10.value)(\"ellipsis\", page_r10.label === \"...\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() !== page_r10.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() === page_r10.value);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_5_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.next());\n    })(\"click\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.next());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r20.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_5_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r21.screenReaderPageLabel);\n  }\n}\nfunction PaginationControlsComponent_ul_3_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 17);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_5_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_5_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"disabled\", _r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !_r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isLastPage());\n  }\n}\nfunction PaginationControlsComponent_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 4);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_Template, 3, 4, \"li\", 5);\n    i0.ɵɵelementStart(2, \"li\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, PaginationControlsComponent_ul_3_li_4_Template, 3, 6, \"li\", 7);\n    i0.ɵɵtemplate(5, PaginationControlsComponent_ul_3_li_5_Template, 3, 4, \"li\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵclassProp(\"responsive\", ctx_r1.responsive);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", _r0.getCurrent(), \" / \", _r0.getLastPage(), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", _r0.pages)(\"ngForTrackBy\", ctx_r1.trackByIndex);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n  }\n}\nclass PaginationService {\n  constructor() {\n    this.change = new EventEmitter();\n    this.instances = {};\n    this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\n  }\n  defaultId() {\n    return this.DEFAULT_ID;\n  }\n  /**\r\n   * Register a PaginationInstance with this service. Returns a\r\n   * boolean value signifying whether the instance is new or\r\n   * updated (true = new or updated, false = unchanged).\r\n   */\n  register(instance) {\n    if (instance.id == null) {\n      instance.id = this.DEFAULT_ID;\n    }\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      return true;\n    } else {\n      return this.updateInstance(instance);\n    }\n  }\n  /**\r\n   * Check each property of the instance and update any that have changed. Return\r\n   * true if any changes were made, else return false.\r\n   */\n  updateInstance(instance) {\n    let changed = false;\n    for (let prop in this.instances[instance.id]) {\n      if (instance[prop] !== this.instances[instance.id][prop]) {\n        this.instances[instance.id][prop] = instance[prop];\n        changed = true;\n      }\n    }\n    return changed;\n  }\n  /**\r\n   * Returns the current page number.\r\n   */\n  getCurrentPage(id) {\n    if (this.instances[id]) {\n      return this.instances[id].currentPage;\n    }\n    return 1;\n  }\n  /**\r\n   * Sets the current page number.\r\n   */\n  setCurrentPage(id, page) {\n    if (this.instances[id]) {\n      let instance = this.instances[id];\n      let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\n      if (page <= maxPage && 1 <= page) {\n        this.instances[id].currentPage = page;\n        this.change.emit(id);\n      }\n    }\n  }\n  /**\r\n   * Sets the value of instance.totalItems\r\n   */\n  setTotalItems(id, totalItems) {\n    if (this.instances[id] && 0 <= totalItems) {\n      this.instances[id].totalItems = totalItems;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Sets the value of instance.itemsPerPage.\r\n   */\n  setItemsPerPage(id, itemsPerPage) {\n    if (this.instances[id]) {\n      this.instances[id].itemsPerPage = itemsPerPage;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Returns a clone of the pagination instance object matching the id. If no\r\n   * id specified, returns the instance corresponding to the default id.\r\n   */\n  getInstance(id = this.DEFAULT_ID) {\n    if (this.instances[id]) {\n      return this.clone(this.instances[id]);\n    }\n    return {};\n  }\n  /**\r\n   * Perform a shallow clone of an object.\r\n   */\n  clone(obj) {\n    var target = {};\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        target[i] = obj[i];\n      }\n    }\n    return target;\n  }\n}\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\nlet PaginatePipe = /*#__PURE__*/(() => {\n  class PaginatePipe {\n    constructor(service) {\n      this.service = service;\n      // store the values from the last time the pipe was invoked\n      this.state = {};\n    }\n    transform(collection, args) {\n      // When an observable is passed through the AsyncPipe, it will output\n      // `null` until the subscription resolves. In this case, we want to\n      // use the cached data from the `state` object to prevent the NgFor\n      // from flashing empty until the real values arrive.\n      if (!(collection instanceof Array)) {\n        let _id = args.id || this.service.defaultId();\n        if (this.state[_id]) {\n          return this.state[_id].slice;\n        } else {\n          return collection;\n        }\n      }\n      let serverSideMode = args.totalItems && args.totalItems !== collection.length;\n      let instance = this.createInstance(collection, args);\n      let id = instance.id;\n      let start, end;\n      let perPage = instance.itemsPerPage;\n      let emitChange = this.service.register(instance);\n      if (!serverSideMode && collection instanceof Array) {\n        perPage = +perPage || LARGE_NUMBER;\n        start = (instance.currentPage - 1) * perPage;\n        end = start + perPage;\n        let isIdentical = this.stateIsIdentical(id, collection, start, end);\n        if (isIdentical) {\n          return this.state[id].slice;\n        } else {\n          let slice = collection.slice(start, end);\n          this.saveState(id, collection, slice, start, end);\n          this.service.change.emit(id);\n          return slice;\n        }\n      } else {\n        if (emitChange) {\n          this.service.change.emit(id);\n        }\n        // save the state for server-side collection to avoid null\n        // flash as new data loads.\n        this.saveState(id, collection, collection, start, end);\n        return collection;\n      }\n    }\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\n    createInstance(collection, config) {\n      this.checkConfig(config);\n      return {\n        id: config.id != null ? config.id : this.service.defaultId(),\n        itemsPerPage: +config.itemsPerPage || 0,\n        currentPage: +config.currentPage || 1,\n        totalItems: +config.totalItems || collection.length\n      };\n    }\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\n    checkConfig(config) {\n      const required = ['itemsPerPage', 'currentPage'];\n      const missing = required.filter(prop => !(prop in config));\n      if (0 < missing.length) {\n        throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\n      }\n    }\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\n    saveState(id, collection, slice, start, end) {\n      this.state[id] = {\n        collection,\n        size: collection.length,\n        slice,\n        start,\n        end\n      };\n    }\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\n    stateIsIdentical(id, collection, start, end) {\n      let state = this.state[id];\n      if (!state) {\n        return false;\n      }\n      let isMetaDataIdentical = state.size === collection.length && state.start === start && state.end === end;\n      if (!isMetaDataIdentical) {\n        return false;\n      }\n      return state.slice.every((element, index) => element === collection[start + index]);\n    }\n  }\n  PaginatePipe.ɵfac = function PaginatePipe_Factory(t) {\n    return new (t || PaginatePipe)(i0.ɵɵdirectiveInject(PaginationService, 16));\n  };\n  PaginatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"paginate\",\n    type: PaginatePipe,\n    pure: false\n  });\n  return PaginatePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\nconst DEFAULT_TEMPLATE = `\n    <pagination-template  #p=\"paginationApi\"\n                         [id]=\"id\"\n                         [maxSize]=\"maxSize\"\n                         (pageChange)=\"pageChange.emit($event)\"\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n    <ul class=\"ngx-pagination\" \n        [class.responsive]=\"responsive\"\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\n\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li> \n\n        <li class=\"small-screen\">\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\n        </li>\n\n        <li [class.current]=\"p.getCurrent() === page.value\" \n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\n            </a>\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\n              <span aria-live=\"polite\">\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \n              </span>\n            </ng-container>\n        </li>\n\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n\n    </ul>\n    </nav>\n    </pagination-template>\n    `;\nconst DEFAULT_STYLES = `\n.ngx-pagination {\n  margin-left: 0;\n  margin-bottom: 1rem; }\n  .ngx-pagination::before, .ngx-pagination::after {\n    content: ' ';\n    display: table; }\n  .ngx-pagination::after {\n    clear: both; }\n  .ngx-pagination li {\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    margin-right: 0.0625rem;\n    border-radius: 0; }\n  .ngx-pagination li {\n    display: inline-block; }\n  .ngx-pagination a,\n  .ngx-pagination button {\n    color: #0a0a0a; \n    display: block;\n    padding: 0.1875rem 0.625rem;\n    border-radius: 0; }\n    .ngx-pagination a:hover,\n    .ngx-pagination button:hover {\n      background: #e6e6e6; }\n  .ngx-pagination .current {\n    padding: 0.1875rem 0.625rem;\n    background: #2199e8;\n    color: #fefefe;\n    cursor: default; }\n  .ngx-pagination .disabled {\n    padding: 0.1875rem 0.625rem;\n    color: #cacaca;\n    cursor: default; } \n    .ngx-pagination .disabled:hover {\n      background: transparent; }\n  .ngx-pagination a, .ngx-pagination button {\n    cursor: pointer; }\n\n.ngx-pagination .pagination-previous a::before,\n.ngx-pagination .pagination-previous.disabled::before { \n  content: '«';\n  display: inline-block;\n  margin-right: 0.5rem; }\n\n.ngx-pagination .pagination-next a::after,\n.ngx-pagination .pagination-next.disabled::after {\n  content: '»';\n  display: inline-block;\n  margin-left: 0.5rem; }\n\n.ngx-pagination .show-for-sr {\n  position: absolute !important;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0); }\n.ngx-pagination .small-screen {\n  display: none; }\n@media screen and (max-width: 601px) {\n  .ngx-pagination.responsive .small-screen {\n    display: inline-block; } \n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\n    display: none; }\n}\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\nlet PaginationControlsDirective = /*#__PURE__*/(() => {\n  class PaginationControlsDirective {\n    constructor(service, changeDetectorRef) {\n      this.service = service;\n      this.changeDetectorRef = changeDetectorRef;\n      this.maxSize = 7;\n      this.pageChange = new EventEmitter();\n      this.pageBoundsCorrection = new EventEmitter();\n      this.pages = [];\n      this.changeSub = this.service.change.subscribe(id => {\n        if (this.id === id) {\n          this.updatePageLinks();\n          this.changeDetectorRef.markForCheck();\n          this.changeDetectorRef.detectChanges();\n        }\n      });\n    }\n    ngOnInit() {\n      if (this.id === undefined) {\n        this.id = this.service.defaultId();\n      }\n      this.updatePageLinks();\n    }\n    ngOnChanges(changes) {\n      this.updatePageLinks();\n    }\n    ngOnDestroy() {\n      this.changeSub.unsubscribe();\n    }\n    /**\r\n     * Go to the previous page\r\n     */\n    previous() {\n      this.checkValidId();\n      this.setCurrent(this.getCurrent() - 1);\n    }\n    /**\r\n     * Go to the next page\r\n     */\n    next() {\n      this.checkValidId();\n      this.setCurrent(this.getCurrent() + 1);\n    }\n    /**\r\n     * Returns true if current page is first page\r\n     */\n    isFirstPage() {\n      return this.getCurrent() === 1;\n    }\n    /**\r\n     * Returns true if current page is last page\r\n     */\n    isLastPage() {\n      return this.getLastPage() === this.getCurrent();\n    }\n    /**\r\n     * Set the current page number.\r\n     */\n    setCurrent(page) {\n      this.pageChange.emit(page);\n    }\n    /**\r\n     * Get the current page number.\r\n     */\n    getCurrent() {\n      return this.service.getCurrentPage(this.id);\n    }\n    /**\r\n     * Returns the last page number\r\n     */\n    getLastPage() {\n      let inst = this.service.getInstance(this.id);\n      if (inst.totalItems < 1) {\n        // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\n        // but it makes sense to consider a single, empty page as the last page.\n        return 1;\n      }\n      return Math.ceil(inst.totalItems / inst.itemsPerPage);\n    }\n    getTotalItems() {\n      return this.service.getInstance(this.id).totalItems;\n    }\n    checkValidId() {\n      if (this.service.getInstance(this.id).id == null) {\n        console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\n      }\n    }\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\n    updatePageLinks() {\n      let inst = this.service.getInstance(this.id);\n      const correctedCurrentPage = this.outOfBoundCorrection(inst);\n      if (correctedCurrentPage !== inst.currentPage) {\n        setTimeout(() => {\n          this.pageBoundsCorrection.emit(correctedCurrentPage);\n          this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n        });\n      } else {\n        this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n      }\n    }\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\n    outOfBoundCorrection(instance) {\n      const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n      if (totalPages < instance.currentPage && 0 < totalPages) {\n        return totalPages;\n      } else if (instance.currentPage < 1) {\n        return 1;\n      }\n      return instance.currentPage;\n    }\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\n      // paginationRange could be a string if passed from attribute, so cast to number.\n      paginationRange = +paginationRange;\n      let pages = [];\n      // Return 1 as default page number\n      // Make sense to show 1 instead of empty when there are no items\n      const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\n      const halfWay = Math.ceil(paginationRange / 2);\n      const isStart = currentPage <= halfWay;\n      const isEnd = totalPages - halfWay < currentPage;\n      const isMiddle = !isStart && !isEnd;\n      let ellipsesNeeded = paginationRange < totalPages;\n      let i = 1;\n      while (i <= totalPages && i <= paginationRange) {\n        let label;\n        let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\n        let openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);\n        let closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);\n        if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n          label = '...';\n        } else {\n          label = pageNumber;\n        }\n        pages.push({\n          label: label,\n          value: pageNumber\n        });\n        i++;\n      }\n      return pages;\n    }\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\n      let halfWay = Math.ceil(paginationRange / 2);\n      if (i === paginationRange) {\n        return totalPages;\n      } else if (i === 1) {\n        return i;\n      } else if (paginationRange < totalPages) {\n        if (totalPages - halfWay < currentPage) {\n          return totalPages - paginationRange + i;\n        } else if (halfWay < currentPage) {\n          return currentPage - halfWay + i;\n        } else {\n          return i;\n        }\n      } else {\n        return i;\n      }\n    }\n  }\n  PaginationControlsDirective.ɵfac = function PaginationControlsDirective_Factory(t) {\n    return new (t || PaginationControlsDirective)(i0.ɵɵdirectiveInject(PaginationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  PaginationControlsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PaginationControlsDirective,\n    selectors: [[\"pagination-template\"], [\"\", \"pagination-template\", \"\"]],\n    inputs: {\n      id: \"id\",\n      maxSize: \"maxSize\"\n    },\n    outputs: {\n      pageChange: \"pageChange\",\n      pageBoundsCorrection: \"pageBoundsCorrection\"\n    },\n    exportAs: [\"paginationApi\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return PaginationControlsDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction coerceToBoolean(input) {\n  return !!input && input !== 'false';\n}\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\nlet PaginationControlsComponent = /*#__PURE__*/(() => {\n  class PaginationControlsComponent {\n    constructor() {\n      this.maxSize = 7;\n      this.previousLabel = 'Previous';\n      this.nextLabel = 'Next';\n      this.screenReaderPaginationLabel = 'Pagination';\n      this.screenReaderPageLabel = 'page';\n      this.screenReaderCurrentLabel = `You're on page`;\n      this.pageChange = new EventEmitter();\n      this.pageBoundsCorrection = new EventEmitter();\n      this._directionLinks = true;\n      this._autoHide = false;\n      this._responsive = false;\n    }\n    get directionLinks() {\n      return this._directionLinks;\n    }\n    set directionLinks(value) {\n      this._directionLinks = coerceToBoolean(value);\n    }\n    get autoHide() {\n      return this._autoHide;\n    }\n    set autoHide(value) {\n      this._autoHide = coerceToBoolean(value);\n    }\n    get responsive() {\n      return this._responsive;\n    }\n    set responsive(value) {\n      this._responsive = coerceToBoolean(value);\n    }\n    trackByIndex(index) {\n      return index;\n    }\n  }\n  PaginationControlsComponent.ɵfac = function PaginationControlsComponent_Factory(t) {\n    return new (t || PaginationControlsComponent)();\n  };\n  PaginationControlsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PaginationControlsComponent,\n    selectors: [[\"pagination-controls\"]],\n    inputs: {\n      id: \"id\",\n      maxSize: \"maxSize\",\n      directionLinks: \"directionLinks\",\n      autoHide: \"autoHide\",\n      responsive: \"responsive\",\n      previousLabel: \"previousLabel\",\n      nextLabel: \"nextLabel\",\n      screenReaderPaginationLabel: \"screenReaderPaginationLabel\",\n      screenReaderPageLabel: \"screenReaderPageLabel\",\n      screenReaderCurrentLabel: \"screenReaderCurrentLabel\"\n    },\n    outputs: {\n      pageChange: \"pageChange\",\n      pageBoundsCorrection: \"pageBoundsCorrection\"\n    },\n    decls: 4,\n    vars: 4,\n    consts: [[3, \"id\", \"maxSize\", \"pageChange\", \"pageBoundsCorrection\"], [\"p\", \"paginationApi\"], [\"role\", \"navigation\"], [\"class\", \"ngx-pagination\", 3, \"responsive\", 4, \"ngIf\"], [1, \"ngx-pagination\"], [\"class\", \"pagination-previous\", 3, \"disabled\", 4, \"ngIf\"], [1, \"small-screen\"], [3, \"current\", \"ellipsis\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"pagination-next\", 3, \"disabled\", 4, \"ngIf\"], [1, \"pagination-previous\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\", 4, \"ngIf\"], [\"aria-disabled\", \"true\", 4, \"ngIf\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\"], [1, \"show-for-sr\"], [\"aria-disabled\", \"true\"], [4, \"ngIf\"], [\"aria-live\", \"polite\"], [1, \"pagination-next\"]],\n    template: function PaginationControlsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"pagination-template\", 0, 1);\n        i0.ɵɵlistener(\"pageChange\", function PaginationControlsComponent_Template_pagination_template_pageChange_0_listener($event) {\n          return ctx.pageChange.emit($event);\n        })(\"pageBoundsCorrection\", function PaginationControlsComponent_Template_pagination_template_pageBoundsCorrection_0_listener($event) {\n          return ctx.pageBoundsCorrection.emit($event);\n        });\n        i0.ɵɵelementStart(2, \"nav\", 2);\n        i0.ɵɵtemplate(3, PaginationControlsComponent_ul_3_Template, 6, 8, \"ul\", 3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵproperty(\"id\", ctx.id)(\"maxSize\", ctx.maxSize);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"aria-label\", ctx.screenReaderPaginationLabel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !(ctx.autoHide && _r0.pages.length <= 1));\n      }\n    },\n    dependencies: [PaginationControlsDirective, i2.NgIf, i2.NgForOf, i2.DecimalPipe],\n    styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PaginationControlsComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxPaginationModule = /*#__PURE__*/(() => {\n  class NgxPaginationModule {}\n  NgxPaginationModule.ɵfac = function NgxPaginationModule_Factory(t) {\n    return new (t || NgxPaginationModule)();\n  };\n  NgxPaginationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxPaginationModule\n  });\n  NgxPaginationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [PaginationService],\n    imports: [[CommonModule]]\n  });\n  return NgxPaginationModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };","map":{"version":3,"names":["i0","EventEmitter","Pipe","Directive","Input","Output","Component","ChangeDetectionStrategy","ViewEncapsulation","NgModule","i2","CommonModule","PaginationService","constructor","change","instances","DEFAULT_ID","defaultId","register","instance","id","updateInstance","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","maxPage","Math","ceil","totalItems","itemsPerPage","emit","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","service","state","transform","collection","args","Array","_id","slice","serverSideMode","length","createInstance","start","end","perPage","emitChange","isIdentical","stateIsIdentical","saveState","config","checkConfig","required","missing","filter","Error","join","size","isMetaDataIdentical","every","element","index","ɵfac","ɵpipe","DEFAULT_TEMPLATE","DEFAULT_STYLES","PaginationControlsDirective","changeDetectorRef","maxSize","pageChange","pageBoundsCorrection","pages","changeSub","subscribe","updatePageLinks","markForCheck","detectChanges","ngOnInit","undefined","ngOnChanges","changes","ngOnDestroy","unsubscribe","previous","checkValidId","setCurrent","getCurrent","next","isFirstPage","isLastPage","getLastPage","inst","getTotalItems","console","warn","correctedCurrentPage","outOfBoundCorrection","setTimeout","createPageArray","totalPages","paginationRange","max","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","openingEllipsesNeeded","closingEllipsesNeeded","push","value","ChangeDetectorRef","ɵdir","coerceToBoolean","input","PaginationControlsComponent","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","_directionLinks","_autoHide","_responsive","directionLinks","autoHide","responsive","trackByIndex","ɵcmp","NgIf","NgForOf","DecimalPipe","NgxPaginationModule","ɵmod","ɵinj"],"sources":["/home/solomon/Desktop/codes/birichani/node_modules/ngx-pagination/fesm2020/ngx-pagination.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass PaginationService {\r\n    constructor() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    defaultId() { return this.DEFAULT_ID; }\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    register(instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    updateInstance(instance) {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    getCurrentPage(id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    setCurrentPage(id, page) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    setTotalItems(id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    setItemsPerPage(id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    getInstance(id = this.DEFAULT_ID) {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    clone(obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nclass PaginatePipe {\r\n    constructor(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    transform(collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n        let emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    }\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    createInstance(collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    checkConfig(config) {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    saveState(id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    stateIsIdentical(id, collection, start, end) {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, deps: [{ token: PaginationService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nPaginatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, name: \"paginate\", pure: false });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginatePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }]; } });\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nconst DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\nconst DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nclass PaginationControlsDirective {\r\n    constructor(service, changeDetectorRef) {\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.updatePageLinks();\r\n    }\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage() {\r\n        return this.getCurrent() === 1;\r\n    }\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage() {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page) {\r\n        this.pageChange.emit(page);\r\n    }\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent() {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage() {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n    getTotalItems() {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n    checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    outOfBoundCorrection(instance) {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    }\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    }\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, deps: [{ token: PaginationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nPaginationControlsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: { id: \"id\", maxSize: \"maxSize\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, exportAs: [\"paginationApi\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PaginationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nclass PaginationControlsComponent {\r\n    constructor() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = `You're on page`;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    get directionLinks() {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    get autoHide() {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    trackByIndex(index) {\r\n        return index;\r\n    }\r\n}\r\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPaginationControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.9\", type: PaginationControlsComponent, selector: \"pagination-controls\", inputs: { id: \"id\", maxSize: \"maxSize\", directionLinks: \"directionLinks\", autoHide: \"autoHide\", responsive: \"responsive\", previousLabel: \"previousLabel\", nextLabel: \"nextLabel\", screenReaderPaginationLabel: \"screenReaderPaginationLabel\", screenReaderPageLabel: \"screenReaderPageLabel\", screenReaderCurrentLabel: \"screenReaderCurrentLabel\" }, outputs: { pageChange: \"pageChange\", pageBoundsCorrection: \"pageBoundsCorrection\" }, ngImport: i0, template: \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <nav role=\\\"navigation\\\" [attr.aria-label]=\\\"screenReaderPaginationLabel\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\" aria-disabled=\\\"true\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n              <span aria-live=\\\"polite\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n              </span>\\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\" aria-disabled=\\\"true\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </nav>\\n    </pagination-template>\\n    \", isInline: true, styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"], directives: [{ type: PaginationControlsDirective, selector: \"pagination-template,[pagination-template]\", inputs: [\"id\", \"maxSize\"], outputs: [\"pageChange\", \"pageBoundsCorrection\"], exportAs: [\"paginationApi\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"number\": i2.DecimalPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: PaginationControlsComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], maxSize: [{\r\n                type: Input\r\n            }], directionLinks: [{\r\n                type: Input\r\n            }], autoHide: [{\r\n                type: Input\r\n            }], responsive: [{\r\n                type: Input\r\n            }], previousLabel: [{\r\n                type: Input\r\n            }], nextLabel: [{\r\n                type: Input\r\n            }], screenReaderPaginationLabel: [{\r\n                type: Input\r\n            }], screenReaderPageLabel: [{\r\n                type: Input\r\n            }], screenReaderCurrentLabel: [{\r\n                type: Input\r\n            }], pageChange: [{\r\n                type: Output\r\n            }], pageBoundsCorrection: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxPaginationModule {\r\n}\r\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, declarations: [PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective], imports: [CommonModule], exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective] });\r\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, providers: [PaginationService], imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.9\", ngImport: i0, type: NgxPaginationModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,YAAY,EAAEC,IAAI,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,QAAQ,QAAQ,eAAe;AAC7I,OAAO,KAAKC,EAAE,MAAM,iBAAiB;AACrC,SAASC,YAAY,QAAQ,iBAAiB;AAAC;EAAA;IAAA,YAkNgDX,EAAE;IAAFA,EAAE,2BA8XsuC;IA9XxuCA,EAAE;MAAFA,EAAE;MAAFA,EAAE;MAAA,YAAFA,EAAE;MAAA,OAAFA,EAAE,aA8X8rC,cAAY;IAAA,EAAE;MA9X9sCA,EAAE;MAAFA,EAAE;MAAA,YAAFA,EAAE;MAAA,OAAFA,EAAE,aA8XutC,cAAY;IAAA,EAAvB;IA9X9sCA,EAAE,UA8X4wC;IA9X9wCA,EAAE,8BA8XwyC;IA9X1yCA,EAAE,UA8Xm0C;IA9Xr0CA,EAAE,eA8X00C;EAAA;EAAA;IAAA,eA9X50CA,EAAE;IAAFA,EAAE,aA8X4wC;IA9X9wCA,EAAE,mDA8X4wC;IA9X9wCA,EAAE,aA8Xm0C;IA9Xr0CA,EAAE,gDA8Xm0C;EAAA;AAAA;AAAA;EAAA;IA9Xr0CA,EAAE,8BA8Xi6C;IA9Xn6CA,EAAE,UA8Xu8C;IA9Xz8CA,EAAE,8BA8Xm+C;IA9Xr+CA,EAAE,UA8X8/C;IA9XhgDA,EAAE,eA8XqgD;EAAA;EAAA;IAAA,eA9XvgDA,EAAE;IAAFA,EAAE,aA8Xu8C;IA9Xz8CA,EAAE,mDA8Xu8C;IA9Xz8CA,EAAE,aA8X8/C;IA9XhgDA,EAAE,gDA8X8/C;EAAA;AAAA;AAAA;EAAA;IA9XhgDA,EAAE,2BA8XgnC;IA9XlnCA,EAAE,iFA8X41C;IA9X91CA,EAAE,uFA8X0hD;IA9X5hDA,EAAE,eA8XyiD;EAAA;EAAA;IA9X3iDA,EAAE;IAAA,YAAFA,EAAE;IAAFA,EAAE,2CA8XslC;IA9XxlCA,EAAE,aA8X2qC;IA9X7qCA,EAAE,yCA8X2qC;IA9X7qCA,EAAE,aA8Xu4C;IA9Xz4CA,EAAE,sCA8Xu4C;EAAA;AAAA;AAAA;EAAA;IAAA,aA9Xz4CA,EAAE;IAAFA,EAAE,2BA8X++D;IA9Xj/DA,EAAE;MAAFA,EAAE;MAAA,iBAAFA,EAAE;MAAFA,EAAE;MAAA,YAAFA,EAAE;MAAA,OAAFA,EAAE,aA8Xu4D,8BAAwB;IAAA,EAAE;MA9Xn6DA,EAAE;MAAA,iBAAFA,EAAE;MAAFA,EAAE;MAAA,YAAFA,EAAE;MAAA,OAAFA,EAAE,aA8X46D,8BAAwB;IAAA,EAAnC;IA9Xn6DA,EAAE,8BA8X6hE;IA9X/hEA,EAAE,UA8XyjE;IA9X3jEA,EAAE,eA8XgkE;IA9XlkEA,EAAE,0BA8XwlE;IA9X1lEA,EAAE,UA8X4pE;IA9X9pEA,EAAE;IAAFA,EAAE,eA8XmqE;EAAA;EAAA;IAAA,iBA9XrqEA,EAAE;IAAA,gBAAFA,EAAE;IAAFA,EAAE,aA8XyjE;IA9X3jEA,EAAE,2DA8XyjE;IA9X3jEA,EAAE,aA8X4pE;IA9X9pEA,EAAE,+DAAFA,EAAE,uCA8X4pE;EAAA;AAAA;AAAA;EAAA;IA9X9pEA,EAAE,2BA8XyvE;IA9X3vEA,EAAE,8BA8XoyE;IA9XtyEA,EAAE,UA8Xi3E;IA9Xn3EA,EAAE,eA8Xw3E;IA9X13EA,EAAE,0BA8Xg5E;IA9Xl5EA,EAAE,UA8Xo9E;IA9Xt9EA,EAAE;IAAFA,EAAE,eA8X29E;IA9X79EA,EAAE,wBA8XghF;EAAA;EAAA;IAAA,iBA9XlhFA,EAAE;IAAA,gBAAFA,EAAE;IAAFA,EAAE,aA8Xi3E;IA9Xn3EA,EAAE,8DA8Xi3E;IA9Xn3EA,EAAE,aA8Xo9E;IA9Xt9EA,EAAE,+DAAFA,EAAE,uCA8Xo9E;EAAA;AAAA;AAAA;EAAA;IA9Xt9EA,EAAE,wBA8Xu1D;IA9Xz1DA,EAAE,iFA8XqrE;IA9XvrEA,EAAE,uGA8XghF;IA9XlhFA,EAAE,eA8X+hF;EAAA;EAAA;IAAA;IA9XjiFA,EAAE;IAAA,YAAFA,EAAE;IAAFA,EAAE,4DA8X2tD;IA9X7tDA,EAAE,aA8X4+D;IA9X9+DA,EAAE,wDA8X4+D;IA9X9+DA,EAAE,aA8XsvE;IA9XxvEA,EAAE,wDA8XsvE;EAAA;AAAA;AAAA;EAAA;IAAA,aA9XxvEA,EAAE;IAAFA,EAAE,2BA8XgvF;IA9XlvFA,EAAE;MAAFA,EAAE;MAAFA,EAAE;MAAA,YAAFA,EAAE;MAAA,OAAFA,EAAE,aA8XgtF,UAAQ;IAAA,EAAE;MA9X5tFA,EAAE;MAAFA,EAAE;MAAA,YAAFA,EAAE;MAAA,OAAFA,EAAE,aA8XquF,UAAQ;IAAA,EAAnB;IA9X5tFA,EAAE,UA8XmxF;IA9XrxFA,EAAE,8BA8X+yF;IA9XjzFA,EAAE,UA8X00F;IA9X50FA,EAAE,eA8Xi1F;EAAA;EAAA;IAAA,gBA9Xn1FA,EAAE;IAAFA,EAAE,aA8XmxF;IA9XrxFA,EAAE,gDA8XmxF;IA9XrxFA,EAAE,aA8X00F;IA9X50FA,EAAE,iDA8X00F;EAAA;AAAA;AAAA;EAAA;IA9X50FA,EAAE,8BA8Xu6F;IA9Xz6FA,EAAE,UA8X08F;IA9X58FA,EAAE,8BA8Xs+F;IA9Xx+FA,EAAE,UA8XigG;IA9XngGA,EAAE,eA8XwgG;EAAA;EAAA;IAAA,gBA9X1gGA,EAAE;IAAFA,EAAE,aA8X08F;IA9X58FA,EAAE,gDA8X08F;IA9X58FA,EAAE,aA8XigG;IA9XngGA,EAAE,iDA8XigG;EAAA;AAAA;AAAA;EAAA;IA9XngGA,EAAE,4BA8XsoF;IA9XxoFA,EAAE,iFA8Xm2F;IA9Xr2FA,EAAE,uFA8X6hG;IA9X/hGA,EAAE,eA8X4iG;EAAA;EAAA;IA9X9iGA,EAAE;IAAA,YAAFA,EAAE;IAAFA,EAAE,0CA8X4mF;IA9X9mFA,EAAE,aA8X6rF;IA9X/rFA,EAAE,sCA8X6rF;IA9X/rFA,EAAE,aA8X64F;IA9X/4FA,EAAE,qCA8X64F;EAAA;AAAA;AAAA;EAAA;IA9X/4FA,EAAE,2BA8XogC;IA9XtgCA,EAAE,6EA8XyiD;IA9X3iDA,EAAE,2BA8XilD;IA9XnlDA,EAAE,UA8XqpD;IA9XvpDA,EAAE,eA8X0pD;IA9X5pDA,EAAE,6EA8X+hF;IA9XjiFA,EAAE,6EA8X4iG;IA9X9iGA,EAAE,eA8XyjG;EAAA;EAAA;IAAA,eA9X3jGA,EAAE;IAAA,YAAFA,EAAE;IAAFA,EAAE,6CA8X68B;IA9X/8BA,EAAE,aA8X6mC;IA9X/mCA,EAAE,0CA8X6mC;IA9X/mCA,EAAE,aA8XqpD;IA9XvpDA,EAAE,yEA8XqpD;IA9XvpDA,EAAE,aA8X+zD;IA9Xj0DA,EAAE,iCA8X+zD;IA9Xj0DA,EAAE,aA8XmoF;IA9XroFA,EAAE,0CA8XmoF;EAAA;AAAA;AA9kBpuF,MAAMY,iBAAiB,CAAC;EACpBC,WAAW,GAAG;IACV,IAAI,CAACC,MAAM,GAAG,IAAIb,YAAY,EAAE;IAChC,IAAI,CAACc,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,uBAAuB;EAC7C;EACAC,SAAS,GAAG;IAAE,OAAO,IAAI,CAACD,UAAU;EAAE;EACtC;AACJ;AACA;AACA;AACA;EACIE,QAAQ,CAACC,QAAQ,EAAE;IACf,IAAIA,QAAQ,CAACC,EAAE,IAAI,IAAI,EAAE;MACrBD,QAAQ,CAACC,EAAE,GAAG,IAAI,CAACJ,UAAU;IACjC;IACA,IAAI,CAAC,IAAI,CAACD,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,EAAE;MAC9B,IAAI,CAACL,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,GAAGD,QAAQ;MACtC,OAAO,IAAI;IACf,CAAC,MACI;MACD,OAAO,IAAI,CAACE,cAAc,CAACF,QAAQ,CAAC;IACxC;EACJ;EACA;AACJ;AACA;AACA;EACIE,cAAc,CAACF,QAAQ,EAAE;IACrB,IAAIG,OAAO,GAAG,KAAK;IACnB,KAAK,IAAIC,IAAI,IAAI,IAAI,CAACR,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,EAAE;MAC1C,IAAID,QAAQ,CAACI,IAAI,CAAC,KAAK,IAAI,CAACR,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,CAACG,IAAI,CAAC,EAAE;QACtD,IAAI,CAACR,SAAS,CAACI,QAAQ,CAACC,EAAE,CAAC,CAACG,IAAI,CAAC,GAAGJ,QAAQ,CAACI,IAAI,CAAC;QAClDD,OAAO,GAAG,IAAI;MAClB;IACJ;IACA,OAAOA,OAAO;EAClB;EACA;AACJ;AACA;EACIE,cAAc,CAACJ,EAAE,EAAE;IACf,IAAI,IAAI,CAACL,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,OAAO,IAAI,CAACL,SAAS,CAACK,EAAE,CAAC,CAACK,WAAW;IACzC;IACA,OAAO,CAAC;EACZ;EACA;AACJ;AACA;EACIC,cAAc,CAACN,EAAE,EAAEO,IAAI,EAAE;IACrB,IAAI,IAAI,CAACZ,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,IAAID,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACK,EAAE,CAAC;MACjC,IAAIQ,OAAO,GAAGC,IAAI,CAACC,IAAI,CAACX,QAAQ,CAACY,UAAU,GAAGZ,QAAQ,CAACa,YAAY,CAAC;MACpE,IAAIL,IAAI,IAAIC,OAAO,IAAI,CAAC,IAAID,IAAI,EAAE;QAC9B,IAAI,CAACZ,SAAS,CAACK,EAAE,CAAC,CAACK,WAAW,GAAGE,IAAI;QACrC,IAAI,CAACb,MAAM,CAACmB,IAAI,CAACb,EAAE,CAAC;MACxB;IACJ;EACJ;EACA;AACJ;AACA;EACIc,aAAa,CAACd,EAAE,EAAEW,UAAU,EAAE;IAC1B,IAAI,IAAI,CAAChB,SAAS,CAACK,EAAE,CAAC,IAAI,CAAC,IAAIW,UAAU,EAAE;MACvC,IAAI,CAAChB,SAAS,CAACK,EAAE,CAAC,CAACW,UAAU,GAAGA,UAAU;MAC1C,IAAI,CAACjB,MAAM,CAACmB,IAAI,CAACb,EAAE,CAAC;IACxB;EACJ;EACA;AACJ;AACA;EACIe,eAAe,CAACf,EAAE,EAAEY,YAAY,EAAE;IAC9B,IAAI,IAAI,CAACjB,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,IAAI,CAACL,SAAS,CAACK,EAAE,CAAC,CAACY,YAAY,GAAGA,YAAY;MAC9C,IAAI,CAAClB,MAAM,CAACmB,IAAI,CAACb,EAAE,CAAC;IACxB;EACJ;EACA;AACJ;AACA;AACA;EACIgB,WAAW,CAAChB,EAAE,GAAG,IAAI,CAACJ,UAAU,EAAE;IAC9B,IAAI,IAAI,CAACD,SAAS,CAACK,EAAE,CAAC,EAAE;MACpB,OAAO,IAAI,CAACiB,KAAK,CAAC,IAAI,CAACtB,SAAS,CAACK,EAAE,CAAC,CAAC;IACzC;IACA,OAAO,CAAC,CAAC;EACb;EACA;AACJ;AACA;EACIiB,KAAK,CAACC,GAAG,EAAE;IACP,IAAIC,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,IAAIC,CAAC,IAAIF,GAAG,EAAE;MACf,IAAIA,GAAG,CAACG,cAAc,CAACD,CAAC,CAAC,EAAE;QACvBD,MAAM,CAACC,CAAC,CAAC,GAAGF,GAAG,CAACE,CAAC,CAAC;MACtB;IACJ;IACA,OAAOD,MAAM;EACjB;AACJ;AAEA,MAAMG,YAAY,GAAGC,MAAM,CAACC,gBAAgB;AAAC,IACvCC,YAAY;EAAlB,MAAMA,YAAY,CAAC;IACfhC,WAAW,CAACiC,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB;MACA,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACnB;IACAC,SAAS,CAACC,UAAU,EAAEC,IAAI,EAAE;MACxB;MACA;MACA;MACA;MACA,IAAI,EAAED,UAAU,YAAYE,KAAK,CAAC,EAAE;QAChC,IAAIC,GAAG,GAAGF,IAAI,CAAC9B,EAAE,IAAI,IAAI,CAAC0B,OAAO,CAAC7B,SAAS,EAAE;QAC7C,IAAI,IAAI,CAAC8B,KAAK,CAACK,GAAG,CAAC,EAAE;UACjB,OAAO,IAAI,CAACL,KAAK,CAACK,GAAG,CAAC,CAACC,KAAK;QAChC,CAAC,MACI;UACD,OAAOJ,UAAU;QACrB;MACJ;MACA,IAAIK,cAAc,GAAGJ,IAAI,CAACnB,UAAU,IAAImB,IAAI,CAACnB,UAAU,KAAKkB,UAAU,CAACM,MAAM;MAC7E,IAAIpC,QAAQ,GAAG,IAAI,CAACqC,cAAc,CAACP,UAAU,EAAEC,IAAI,CAAC;MACpD,IAAI9B,EAAE,GAAGD,QAAQ,CAACC,EAAE;MACpB,IAAIqC,KAAK,EAAEC,GAAG;MACd,IAAIC,OAAO,GAAGxC,QAAQ,CAACa,YAAY;MACnC,IAAI4B,UAAU,GAAG,IAAI,CAACd,OAAO,CAAC5B,QAAQ,CAACC,QAAQ,CAAC;MAChD,IAAI,CAACmC,cAAc,IAAIL,UAAU,YAAYE,KAAK,EAAE;QAChDQ,OAAO,GAAG,CAACA,OAAO,IAAIjB,YAAY;QAClCe,KAAK,GAAG,CAACtC,QAAQ,CAACM,WAAW,GAAG,CAAC,IAAIkC,OAAO;QAC5CD,GAAG,GAAGD,KAAK,GAAGE,OAAO;QACrB,IAAIE,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAAC1C,EAAE,EAAE6B,UAAU,EAAEQ,KAAK,EAAEC,GAAG,CAAC;QACnE,IAAIG,WAAW,EAAE;UACb,OAAO,IAAI,CAACd,KAAK,CAAC3B,EAAE,CAAC,CAACiC,KAAK;QAC/B,CAAC,MACI;UACD,IAAIA,KAAK,GAAGJ,UAAU,CAACI,KAAK,CAACI,KAAK,EAAEC,GAAG,CAAC;UACxC,IAAI,CAACK,SAAS,CAAC3C,EAAE,EAAE6B,UAAU,EAAEI,KAAK,EAAEI,KAAK,EAAEC,GAAG,CAAC;UACjD,IAAI,CAACZ,OAAO,CAAChC,MAAM,CAACmB,IAAI,CAACb,EAAE,CAAC;UAC5B,OAAOiC,KAAK;QAChB;MACJ,CAAC,MACI;QACD,IAAIO,UAAU,EAAE;UACZ,IAAI,CAACd,OAAO,CAAChC,MAAM,CAACmB,IAAI,CAACb,EAAE,CAAC;QAChC;QACA;QACA;QACA,IAAI,CAAC2C,SAAS,CAAC3C,EAAE,EAAE6B,UAAU,EAAEA,UAAU,EAAEQ,KAAK,EAAEC,GAAG,CAAC;QACtD,OAAOT,UAAU;MACrB;IACJ;IACA;AACJ;AACA;IACIO,cAAc,CAACP,UAAU,EAAEe,MAAM,EAAE;MAC/B,IAAI,CAACC,WAAW,CAACD,MAAM,CAAC;MACxB,OAAO;QACH5C,EAAE,EAAE4C,MAAM,CAAC5C,EAAE,IAAI,IAAI,GAAG4C,MAAM,CAAC5C,EAAE,GAAG,IAAI,CAAC0B,OAAO,CAAC7B,SAAS,EAAE;QAC5De,YAAY,EAAE,CAACgC,MAAM,CAAChC,YAAY,IAAI,CAAC;QACvCP,WAAW,EAAE,CAACuC,MAAM,CAACvC,WAAW,IAAI,CAAC;QACrCM,UAAU,EAAE,CAACiC,MAAM,CAACjC,UAAU,IAAIkB,UAAU,CAACM;MACjD,CAAC;IACL;IACA;AACJ;AACA;IACIU,WAAW,CAACD,MAAM,EAAE;MAChB,MAAME,QAAQ,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC;MAChD,MAAMC,OAAO,GAAGD,QAAQ,CAACE,MAAM,CAAC7C,IAAI,IAAI,EAAEA,IAAI,IAAIyC,MAAM,CAAC,CAAC;MAC1D,IAAI,CAAC,GAAGG,OAAO,CAACZ,MAAM,EAAE;QACpB,MAAM,IAAIc,KAAK,CAAE,wEAAuEF,OAAO,CAACG,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;MACjH;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;IACIP,SAAS,CAAC3C,EAAE,EAAE6B,UAAU,EAAEI,KAAK,EAAEI,KAAK,EAAEC,GAAG,EAAE;MACzC,IAAI,CAACX,KAAK,CAAC3B,EAAE,CAAC,GAAG;QACb6B,UAAU;QACVsB,IAAI,EAAEtB,UAAU,CAACM,MAAM;QACvBF,KAAK;QACLI,KAAK;QACLC;MACJ,CAAC;IACL;IACA;AACJ;AACA;IACII,gBAAgB,CAAC1C,EAAE,EAAE6B,UAAU,EAAEQ,KAAK,EAAEC,GAAG,EAAE;MACzC,IAAIX,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC3B,EAAE,CAAC;MAC1B,IAAI,CAAC2B,KAAK,EAAE;QACR,OAAO,KAAK;MAChB;MACA,IAAIyB,mBAAmB,GAAGzB,KAAK,CAACwB,IAAI,KAAKtB,UAAU,CAACM,MAAM,IACtDR,KAAK,CAACU,KAAK,KAAKA,KAAK,IACrBV,KAAK,CAACW,GAAG,KAAKA,GAAG;MACrB,IAAI,CAACc,mBAAmB,EAAE;QACtB,OAAO,KAAK;MAChB;MACA,OAAOzB,KAAK,CAACM,KAAK,CAACoB,KAAK,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAKD,OAAO,KAAKzB,UAAU,CAACQ,KAAK,GAAGkB,KAAK,CAAC,CAAC;IACvF;EACJ;EACA9B,YAAY,CAAC+B,IAAI;IAAA,iBAAwF/B,YAAY,EAAtB7C,EAAE,mBAAsCY,iBAAiB;EAAA,CAAuC;EAC/LiC,YAAY,CAACgC,KAAK,kBAD6E7E,EAAE;IAAA;IAAA,MACM6C,YAAY;IAAA;EAAA,EAAkC;EAAC,OA1GhJA,YAAY;AAAA;AA2GlB;EAAA;AAAA;;AAQA;AACA;AACA;AACA;AACA,MAAMiC,gBAAgB,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAMC,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AAJA,IAKMC,2BAA2B;EAAjC,MAAMA,2BAA2B,CAAC;IAC9BnE,WAAW,CAACiC,OAAO,EAAEmC,iBAAiB,EAAE;MACpC,IAAI,CAACnC,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACmC,iBAAiB,GAAGA,iBAAiB;MAC1C,IAAI,CAACC,OAAO,GAAG,CAAC;MAChB,IAAI,CAACC,UAAU,GAAG,IAAIlF,YAAY,EAAE;MACpC,IAAI,CAACmF,oBAAoB,GAAG,IAAInF,YAAY,EAAE;MAC9C,IAAI,CAACoF,KAAK,GAAG,EAAE;MACf,IAAI,CAACC,SAAS,GAAG,IAAI,CAACxC,OAAO,CAAChC,MAAM,CAC/ByE,SAAS,CAACnE,EAAE,IAAI;QACjB,IAAI,IAAI,CAACA,EAAE,KAAKA,EAAE,EAAE;UAChB,IAAI,CAACoE,eAAe,EAAE;UACtB,IAAI,CAACP,iBAAiB,CAACQ,YAAY,EAAE;UACrC,IAAI,CAACR,iBAAiB,CAACS,aAAa,EAAE;QAC1C;MACJ,CAAC,CAAC;IACN;IACAC,QAAQ,GAAG;MACP,IAAI,IAAI,CAACvE,EAAE,KAAKwE,SAAS,EAAE;QACvB,IAAI,CAACxE,EAAE,GAAG,IAAI,CAAC0B,OAAO,CAAC7B,SAAS,EAAE;MACtC;MACA,IAAI,CAACuE,eAAe,EAAE;IAC1B;IACAK,WAAW,CAACC,OAAO,EAAE;MACjB,IAAI,CAACN,eAAe,EAAE;IAC1B;IACAO,WAAW,GAAG;MACV,IAAI,CAACT,SAAS,CAACU,WAAW,EAAE;IAChC;IACA;AACJ;AACA;IACIC,QAAQ,GAAG;MACP,IAAI,CAACC,YAAY,EAAE;MACnB,IAAI,CAACC,UAAU,CAAC,IAAI,CAACC,UAAU,EAAE,GAAG,CAAC,CAAC;IAC1C;IACA;AACJ;AACA;IACIC,IAAI,GAAG;MACH,IAAI,CAACH,YAAY,EAAE;MACnB,IAAI,CAACC,UAAU,CAAC,IAAI,CAACC,UAAU,EAAE,GAAG,CAAC,CAAC;IAC1C;IACA;AACJ;AACA;IACIE,WAAW,GAAG;MACV,OAAO,IAAI,CAACF,UAAU,EAAE,KAAK,CAAC;IAClC;IACA;AACJ;AACA;IACIG,UAAU,GAAG;MACT,OAAO,IAAI,CAACC,WAAW,EAAE,KAAK,IAAI,CAACJ,UAAU,EAAE;IACnD;IACA;AACJ;AACA;IACID,UAAU,CAACxE,IAAI,EAAE;MACb,IAAI,CAACwD,UAAU,CAAClD,IAAI,CAACN,IAAI,CAAC;IAC9B;IACA;AACJ;AACA;IACIyE,UAAU,GAAG;MACT,OAAO,IAAI,CAACtD,OAAO,CAACtB,cAAc,CAAC,IAAI,CAACJ,EAAE,CAAC;IAC/C;IACA;AACJ;AACA;IACIoF,WAAW,GAAG;MACV,IAAIC,IAAI,GAAG,IAAI,CAAC3D,OAAO,CAACV,WAAW,CAAC,IAAI,CAAChB,EAAE,CAAC;MAC5C,IAAIqF,IAAI,CAAC1E,UAAU,GAAG,CAAC,EAAE;QACrB;QACA;QACA,OAAO,CAAC;MACZ;MACA,OAAOF,IAAI,CAACC,IAAI,CAAC2E,IAAI,CAAC1E,UAAU,GAAG0E,IAAI,CAACzE,YAAY,CAAC;IACzD;IACA0E,aAAa,GAAG;MACZ,OAAO,IAAI,CAAC5D,OAAO,CAACV,WAAW,CAAC,IAAI,CAAChB,EAAE,CAAC,CAACW,UAAU;IACvD;IACAmE,YAAY,GAAG;MACX,IAAI,IAAI,CAACpD,OAAO,CAACV,WAAW,CAAC,IAAI,CAAChB,EAAE,CAAC,CAACA,EAAE,IAAI,IAAI,EAAE;QAC9CuF,OAAO,CAACC,IAAI,CAAE,kDAAiD,IAAI,CAACxF,EAAG,oDAAmD,CAAC;MAC/H;IACJ;IACA;AACJ;AACA;AACA;AACA;IACIoE,eAAe,GAAG;MACd,IAAIiB,IAAI,GAAG,IAAI,CAAC3D,OAAO,CAACV,WAAW,CAAC,IAAI,CAAChB,EAAE,CAAC;MAC5C,MAAMyF,oBAAoB,GAAG,IAAI,CAACC,oBAAoB,CAACL,IAAI,CAAC;MAC5D,IAAII,oBAAoB,KAAKJ,IAAI,CAAChF,WAAW,EAAE;QAC3CsF,UAAU,CAAC,MAAM;UACb,IAAI,CAAC3B,oBAAoB,CAACnD,IAAI,CAAC4E,oBAAoB,CAAC;UACpD,IAAI,CAACxB,KAAK,GAAG,IAAI,CAAC2B,eAAe,CAACP,IAAI,CAAChF,WAAW,EAAEgF,IAAI,CAACzE,YAAY,EAAEyE,IAAI,CAAC1E,UAAU,EAAE,IAAI,CAACmD,OAAO,CAAC;QACzG,CAAC,CAAC;MACN,CAAC,MACI;QACD,IAAI,CAACG,KAAK,GAAG,IAAI,CAAC2B,eAAe,CAACP,IAAI,CAAChF,WAAW,EAAEgF,IAAI,CAACzE,YAAY,EAAEyE,IAAI,CAAC1E,UAAU,EAAE,IAAI,CAACmD,OAAO,CAAC;MACzG;IACJ;IACA;AACJ;AACA;AACA;IACI4B,oBAAoB,CAAC3F,QAAQ,EAAE;MAC3B,MAAM8F,UAAU,GAAGpF,IAAI,CAACC,IAAI,CAACX,QAAQ,CAACY,UAAU,GAAGZ,QAAQ,CAACa,YAAY,CAAC;MACzE,IAAIiF,UAAU,GAAG9F,QAAQ,CAACM,WAAW,IAAI,CAAC,GAAGwF,UAAU,EAAE;QACrD,OAAOA,UAAU;MACrB,CAAC,MACI,IAAI9F,QAAQ,CAACM,WAAW,GAAG,CAAC,EAAE;QAC/B,OAAO,CAAC;MACZ;MACA,OAAON,QAAQ,CAACM,WAAW;IAC/B;IACA;AACJ;AACA;IACIuF,eAAe,CAACvF,WAAW,EAAEO,YAAY,EAAED,UAAU,EAAEmF,eAAe,EAAE;MACpE;MACAA,eAAe,GAAG,CAACA,eAAe;MAClC,IAAI7B,KAAK,GAAG,EAAE;MACd;MACA;MACA,MAAM4B,UAAU,GAAGpF,IAAI,CAACsF,GAAG,CAACtF,IAAI,CAACC,IAAI,CAACC,UAAU,GAAGC,YAAY,CAAC,EAAE,CAAC,CAAC;MACpE,MAAMoF,OAAO,GAAGvF,IAAI,CAACC,IAAI,CAACoF,eAAe,GAAG,CAAC,CAAC;MAC9C,MAAMG,OAAO,GAAG5F,WAAW,IAAI2F,OAAO;MACtC,MAAME,KAAK,GAAGL,UAAU,GAAGG,OAAO,GAAG3F,WAAW;MAChD,MAAM8F,QAAQ,GAAG,CAACF,OAAO,IAAI,CAACC,KAAK;MACnC,IAAIE,cAAc,GAAGN,eAAe,GAAGD,UAAU;MACjD,IAAIzE,CAAC,GAAG,CAAC;MACT,OAAOA,CAAC,IAAIyE,UAAU,IAAIzE,CAAC,IAAI0E,eAAe,EAAE;QAC5C,IAAIO,KAAK;QACT,IAAIC,UAAU,GAAG,IAAI,CAACC,mBAAmB,CAACnF,CAAC,EAAEf,WAAW,EAAEyF,eAAe,EAAED,UAAU,CAAC;QACtF,IAAIW,qBAAqB,GAAIpF,CAAC,KAAK,CAAC,KAAK+E,QAAQ,IAAID,KAAK,CAAE;QAC5D,IAAIO,qBAAqB,GAAIrF,CAAC,KAAK0E,eAAe,GAAG,CAAC,KAAKK,QAAQ,IAAIF,OAAO,CAAE;QAChF,IAAIG,cAAc,KAAKI,qBAAqB,IAAIC,qBAAqB,CAAC,EAAE;UACpEJ,KAAK,GAAG,KAAK;QACjB,CAAC,MACI;UACDA,KAAK,GAAGC,UAAU;QACtB;QACArC,KAAK,CAACyC,IAAI,CAAC;UACPL,KAAK,EAAEA,KAAK;UACZM,KAAK,EAAEL;QACX,CAAC,CAAC;QACFlF,CAAC,EAAE;MACP;MACA,OAAO6C,KAAK;IAChB;IACA;AACJ;AACA;AACA;IACIsC,mBAAmB,CAACnF,CAAC,EAAEf,WAAW,EAAEyF,eAAe,EAAED,UAAU,EAAE;MAC7D,IAAIG,OAAO,GAAGvF,IAAI,CAACC,IAAI,CAACoF,eAAe,GAAG,CAAC,CAAC;MAC5C,IAAI1E,CAAC,KAAK0E,eAAe,EAAE;QACvB,OAAOD,UAAU;MACrB,CAAC,MACI,IAAIzE,CAAC,KAAK,CAAC,EAAE;QACd,OAAOA,CAAC;MACZ,CAAC,MACI,IAAI0E,eAAe,GAAGD,UAAU,EAAE;QACnC,IAAIA,UAAU,GAAGG,OAAO,GAAG3F,WAAW,EAAE;UACpC,OAAOwF,UAAU,GAAGC,eAAe,GAAG1E,CAAC;QAC3C,CAAC,MACI,IAAI4E,OAAO,GAAG3F,WAAW,EAAE;UAC5B,OAAOA,WAAW,GAAG2F,OAAO,GAAG5E,CAAC;QACpC,CAAC,MACI;UACD,OAAOA,CAAC;QACZ;MACJ,CAAC,MACI;QACD,OAAOA,CAAC;MACZ;IACJ;EACJ;EACAwC,2BAA2B,CAACJ,IAAI;IAAA,iBAAwFI,2BAA2B,EAjUpDhF,EAAE,mBAiUoEY,iBAAiB,GAjUvFZ,EAAE,mBAiUkGA,EAAE,CAACgI,iBAAiB;EAAA,CAA4C;EACnQhD,2BAA2B,CAACiD,IAAI,kBAlU+DjI,EAAE;IAAA,MAkUWgF,2BAA2B;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;IAAA,WAlUxChF,EAAE;EAAA,EAkU+R;EAAC,OAvL3XgF,2BAA2B;AAAA;AAwLjC;EAAA;AAAA;AAgBA,SAASkD,eAAe,CAACC,KAAK,EAAE;EAC5B,OAAO,CAAC,CAACA,KAAK,IAAIA,KAAK,KAAK,OAAO;AACvC;AACA;AACA;AACA;AAFA,IAGMC,2BAA2B;EAAjC,MAAMA,2BAA2B,CAAC;IAC9BvH,WAAW,GAAG;MACV,IAAI,CAACqE,OAAO,GAAG,CAAC;MAChB,IAAI,CAACmD,aAAa,GAAG,UAAU;MAC/B,IAAI,CAACC,SAAS,GAAG,MAAM;MACvB,IAAI,CAACC,2BAA2B,GAAG,YAAY;MAC/C,IAAI,CAACC,qBAAqB,GAAG,MAAM;MACnC,IAAI,CAACC,wBAAwB,GAAI,gBAAe;MAChD,IAAI,CAACtD,UAAU,GAAG,IAAIlF,YAAY,EAAE;MACpC,IAAI,CAACmF,oBAAoB,GAAG,IAAInF,YAAY,EAAE;MAC9C,IAAI,CAACyI,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACC,SAAS,GAAG,KAAK;MACtB,IAAI,CAACC,WAAW,GAAG,KAAK;IAC5B;IACA,IAAIC,cAAc,GAAG;MACjB,OAAO,IAAI,CAACH,eAAe;IAC/B;IACA,IAAIG,cAAc,CAACd,KAAK,EAAE;MACtB,IAAI,CAACW,eAAe,GAAGR,eAAe,CAACH,KAAK,CAAC;IACjD;IACA,IAAIe,QAAQ,GAAG;MACX,OAAO,IAAI,CAACH,SAAS;IACzB;IACA,IAAIG,QAAQ,CAACf,KAAK,EAAE;MAChB,IAAI,CAACY,SAAS,GAAGT,eAAe,CAACH,KAAK,CAAC;IAC3C;IACA,IAAIgB,UAAU,GAAG;MACb,OAAO,IAAI,CAACH,WAAW;IAC3B;IACA,IAAIG,UAAU,CAAChB,KAAK,EAAE;MAClB,IAAI,CAACa,WAAW,GAAGV,eAAe,CAACH,KAAK,CAAC;IAC7C;IACAiB,YAAY,CAACrE,KAAK,EAAE;MAChB,OAAOA,KAAK;IAChB;EACJ;EACAyD,2BAA2B,CAACxD,IAAI;IAAA,iBAAwFwD,2BAA2B;EAAA,CAAmD;EACtMA,2BAA2B,CAACa,IAAI,kBA9X+DjJ,EAAE;IAAA,MA8XWoI,2BAA2B;IAAA;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QA9XxCpI,EAAE,+CA8X8yB;QA9XhzBA,EAAE;UAAA,OA8X6rB,2BAAuB;QAAA,EAAE;UAAA,OAAoD,qCAAiC;QAAA,EAArF;QA9XxtBA,EAAE,4BA8X+3B;QA9Xj4BA,EAAE,wEA8XyjG;QA9X3jGA,EAAE,eA8XqkG;MAAA;MAAA;QAAA,YA9XvkGA,EAAE;QAAFA,EAAE,yBA8XmmB;QA9XrmBA,EAAE,aA8X83B;QA9Xh4BA,EAAE,2DA8X83B;QA9Xh4BA,EAAE,aA8XigC;QA9XngCA,EAAE,6DA8XigC;MAAA;IAAA;IAAA,eAAglHgF,2BAA2B,EAA4KtE,EAAE,CAACwI,IAAI,EAA0ExI,EAAE,CAACyI,OAAO,EAA4GzI,EAAE,CAAC0I,WAAW;IAAA;IAAA;IAAA;EAAA,EAAmG;EAAC,OArC5qKhB,2BAA2B;AAAA;AAsCjC;EAAA;AAAA;AAiCoB,IAEdiB,mBAAmB;EAAzB,MAAMA,mBAAmB,CAAC;EAE1BA,mBAAmB,CAACzE,IAAI;IAAA,iBAAwFyE,mBAAmB;EAAA,CAAkD;EACrLA,mBAAmB,CAACC,IAAI,kBArauEtJ,EAAE;IAAA,MAqagBqJ;EAAmB,EAEe;EACnJA,mBAAmB,CAACE,IAAI,kBAxauEvJ,EAAE;IAAA,WAwagD,CAACY,iBAAiB,CAAC;IAAA,UAAY,CAACD,YAAY,CAAC;EAAA,EAAI;EAAC,OAN7L0I,mBAAmB;AAAA;AAOzB;EAAA;AAAA;;AAcA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAExG,YAAY,EAAEuF,2BAA2B,EAAEpD,2BAA2B,EAAEpE,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}